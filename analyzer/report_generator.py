"""
Report Generator ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç AST, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ ML.
–§–æ—Ä–º–∏—Ä—É–µ—Ç Markdown-–æ—Ç—á—ë—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏ —è–¥—Ä–∞.
"""

import os
import argparse

from .ast_diff import ASTDiff
from .semantic_diff import SemanticDiff
from .struct_init_finder import StructInitFinder
from .ml_classifier import MLClassifier


class ReportGenerator:
    def __init__(self, session_dir: str):
        self.session_dir = session_dir
        self.ast = ASTDiff()
        self.semantic = SemanticDiff()
        try:
            self.ml = MLClassifier()
            self.ml_enabled = True
        except Exception as e:
            print(f"[WARN] ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")
            self.ml = None
            self.ml_enabled = False

        self.reports_dir = os.path.join(session_dir, "reports")
        os.makedirs(self.reports_dir, exist_ok=True)

    def analyze_version(self, version: str, old_code: str, new_code: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —è–¥—Ä–∞."""
        report_lines = [f"# üìä –û—Ç—á—ë—Ç –ø–æ —è–¥—Ä—É {version}", ""]

        # AST
        ast_changes = self.ast.diff(old_code, new_code)
        report_lines.append("## üîπ AST-–∞–Ω–∞–ª–∏–∑")
        if ast_changes:
            report_lines.extend([f"- {c}" for c in ast_changes])
        else:
            report_lines.append("- AST-–∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á—ë–Ω –∏–ª–∏ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –°–µ–º–∞–Ω—Ç–∏–∫–∞
        sem_hints = self.semantic.analyze(old_code, new_code)
        report_lines.append("\n## üîπ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        if sem_hints:
            report_lines.extend([f"- {h}" for h in sem_hints])
        else:
            report_lines.append("- –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –ü–æ–∏—Å–∫ struct init (–ø—Ä–∏–º–µ—Ä –¥–ª—è sched_domain)
        finder = StructInitFinder("sched_domain")
        struct_hits = finder.find_inits(new_code)
        report_lines.append("\n## üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ struct sched_domain")
        if struct_hits:
            report_lines.extend([f"- {h}" for h in struct_hits])
        else:
            report_lines.append("- –ù–µ –Ω–∞–π–¥–µ–Ω–æ")

        # ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        report_lines.append("\n## üîπ ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
        if self.ml_enabled and self.ml:
            classification = self.ml.classify(new_code)
            report_lines.append(f"- {classification}")
        else:
            report_lines.append("- ML –æ—Ç–∫–ª—é—á—ë–Ω –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        return "\n".join(report_lines)

    def save_report(self, version: str, content: str):
        out_path = os.path.join(self.reports_dir, f"report-{version}.md")
        with open(out_path, "w", encoding="utf-8") as f:
            f.write(content)
        print(f"[OK] –°–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ç—á—ë—Ç: {out_path}")

    def save_combined_report(self, versions: list):
        combined_path = os.path.join(self.reports_dir, "combined-report.md")
        with open(combined_path, "w", encoding="utf-8") as f:
            for v in versions:
                f.write(f"# === {v} ===\n\n")
                path = os.path.join(self.reports_dir, f"report-{v}.md")
                if os.path.exists(path):
                    f.write(open(path, encoding="utf-8").read())
                    f.write("\n\n")
                else:
                    f.write(f"_–û—Ç—á—ë—Ç –¥–ª—è {v} –Ω–µ –Ω–∞–π–¥–µ–Ω_\n\n")
        print(f"[OK] –°–æ—Ö—Ä–∞–Ω—ë–Ω –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –æ—Ç—á—ë—Ç: {combined_path}")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--session", required=True, help="–ö–∞—Ç–∞–ª–æ–≥ —Å–µ—Å—Å–∏–∏")
    args = parser.parse_args()

    rg = ReportGenerator(args.session)

    # üîπ –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    versions = ["5.10", "6.1", "6.12"]
    for v in versions:
        old_code = "int cpu_power;" if v == "5.10" else ""
        new_code = "raw_spinlock_t lock;" if v == "6.12" else "timer_setup();"
        content = rg.analyze_version(v, old_code, new_code)
        rg.save_report(v, content)

    rg.save_combined_report(versions)


if __name__ == "__main__":
    main()
